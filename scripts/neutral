#! /usr/bin/env clj

(load-file "/home/eschulte/research/genprog/asm/src/asm-gp.clj")
(in-ns 'asm-gp)  (use 'clojure.contrib.command-line)

(defn to-int [n] (if (string? n) (Integer/parseInt n) n))

(defn ntrl? [asm script timeout]
  "Check if a mutant is still in the neutral space."
  (let [asm (compile-asm asm)  bin (:compile asm)
        out-file (.getPath (File/createTempFile "variant-" ".out"))
        results (assoc asm
                  :fitness (if bin
                             (try
                              (with-timeout timeout (s/sh script bin out-file))
                              
                              (if (.exists (java.io.File. out-file))
                                (count (f/read-lines out-file))
                                0)
                              (catch Exception e 0))
                             0))]
    (dorun
     (map #(.delete (java.io.File. %))
          (filter #(and % (.exists (java.io.File. %)))
                  (list bin out-file))))
    results))

(with-command-line (rest *command-line-args*)
  "explore neutral spaces:

  neutral [options...] [initial populations...]

1. takes an initial population from STDIN
2. cycle through working individuals in the population generating
   mutants until pop total successful mutants have been found
3. dump successful mutants to STDOUT as they are found\n"
  [[compiler "use X to compile C files" "gcc"]
   [cflags   "pass X flags to compiler" nil]
   [script   "use X to test quality of a variant" "./test.sh"]
   [test-num "number of tests to be passed" 10]
   [out-num  "desired number of successful outputs" 1000]
   [timeout  "timeout tests after X seconds" 4000]
   rest]
  
  (let [pop (filter #(= (:fitness %) (to-int test-num))
                    (pmap #(if (:fitness %) % (ntrl? % script (to-int timeout)))
                          (cread-obj (first rest))))]
    ;; write out configuration as commented clojure
    (println (str ";; compiler: " compiler))
    (println (str ";;   cflags: " cflags))
    (println (str ";;     test: " script))
    (println (str ";; test-num: " test-num))
    (println (str ";;  out-num: " out-num))
    (println (str ";;  timeout: " timeout))
    (println (str ";; init-pop: " (first rest)))
    (println (str ";; init-fit: " (count pop)))
    (println "(")
    (if (empty? pop)
      (binding [*out* *err*] (println (format "No working individuals!")))
      (dorun
       (take (to-int out-num)
             (filter #(= (:fitness %) (to-int test-num))
                     (map #(do (println (pr-str %)) %)
                          (pmap #(ntrl? (mutate-asm %) script (to-int timeout))
                                (cycle pop)))))))
    (println ")")))
